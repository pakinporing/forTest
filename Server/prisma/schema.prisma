// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  USER
}

model User {
  id                   Int        @id @default(autoincrement())
  username             String     @unique
  password             String
  email                String     @unique
  firstName            String
  lastName             String
  role                 Role @default(USER)
  coverProfileImageUrl String?
  favorites            Favorite[]
}

model Favorite {
  userId  Int
  mangaId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  manga   Manga @relation(fields: [mangaId], references: [id], onDelete: Cascade)

  @@id([userId, mangaId])
}

model Manga {
  id          Int        @id @default(autoincrement())
  mangaName   String
  description String
  imageUrl    String
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime   @updatedAt @db.Timestamp(0)
  views       Int
  favorites   Favorite[]
  chapters    Chapter[]
}

model Chapter {
  id           Int      @id @default(autoincrement())
  chapterTitle String
  chapterNo    Int
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @db.Timestamp(0)
  description  String?
  mangaId      Int
  manga        Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  pages        Page[]
}

model Page {
  id         Int     @id @default(autoincrement())
  pageNumber Int
  imageUrl   String
  chapterId  Int
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}
